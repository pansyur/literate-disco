build:
  mode: script

version: 1.0.{build}
image: Ubuntu

branches:
  only:
    - Sera

environment:
  # Your environment variables if needed

install:
  - sudo apt update
  - sudo apt install -y nodejs npm curl python3 python3-pip
  - npm install webtorrent-cli
  - pip3 install requests

build_script:
  - |
      echo "Starting torrent download..."
      npx webtorrent download "magnet:?xt=urn:btih:5634C3633F1AECC88442A9FB0C4B8AA202FE01CA&dn=Pohl%20M.%20Particles%2C%20Fields%2C%20Space-Time%202ed%202025&tr=udp://tracker.bittor.pw:1337/announce&tr=udp://tracker.opentrackr.org:1337/announce&tr=udp://tracker.dler.org:6969/announce&tr=udp://open.stealth.si:80/announce&tr=udp://tracker.torrent.eu.org:451/announce&tr=udp://exodus.desync.com:6969/announce&tr=udp://open.demonii.com:1337/announce" "magnet:?xt=urn:btih:33B12C6DFDD8E3E269C6A1FD6BC6CB70D2672E6D&dn=Saleh%20B.%20Quantum%20Photonics.%20Bimodes%2C%20Qubits%2C%20and%20Biphotons%202025&tr=udp://tracker.bittor.pw:1337/announce&tr=udp://tracker.opentrackr.org:1337/announce&tr=udp://tracker.dler.org:6969/announce&tr=udp://open.stealth.si:80/announce&tr=udp://tracker.torrent.eu.org:451/announce&tr=udp://exodus.desync.com:6969/announce&tr=udp://open.demonii.com:1337/announce" --out downloads
      echo "Downloading completed."

      # Create the Python upload script for filebin.net
      cat <<'EOF' > upload_files.py
import os
import requests
import concurrent.futures

# Set the directory containing files
directory = 'downloads'

# The upload URL for filebin.net (no filename in URL, just base URL)
upload_url = 'https://filebin.net/Sahaujwsh/{filename}'

def upload_file(file_path):
    filename = os.path.basename(file_path)
    print(f'Starting upload: {filename}')
    with open(file_path, 'rb') as f:
        response = requests.post(upload_url, files={'file': f})
    if response.status_code == 200:
        uploaded_url = response.url
        print(f'Uploaded {filename} to {uploaded_url}')
    else:
        print(f'Failed to upload {filename}, status code: {response.status_code}')
    return filename, response.status_code, response.url if response.status_code == 200 else None

# Gather all files in the downloads directory
files = [os.path.join('downloads', f) for f in os.listdir('downloads') if os.path.isfile(os.path.join('downloads', f))]

# Upload files concurrently
with concurrent.futures.ThreadPoolExecutor() as executor:
    futures = [executor.submit(upload_file, file) for file in files]
    for future in concurrent.futures.as_completed(futures):
        filename, status_code, uploaded_url = future.result()
        if uploaded_url:
            print(f'Uploaded {filename}: {uploaded_url}')
        else:
            print(f'Upload failed for {filename}')
EOF

      # Run the upload script
      python3 upload_files.py
